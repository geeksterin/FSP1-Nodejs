A module is an encapsulated and resuable chunk of code that has its own
context.
In Node.js, each file is treated as a separate module.

Type of modules
----------------
    - Local modules: Modules that we create in our application
    - Built-in modules: Modules that Node.js ships with
    - Third party modules: Modules written by other developers that we can use in our application

Local Modules
    - Modules that we create in our application (write some examples)
    - In Node each file is a module , but isolated by default.
    - To instruct node to execute not only the current module but also the other, we use the commonJs module format.
    - CommonJs is a standard that states how a module should be structured and shared.
    - Node adopted commonJs when it started out,in most of the code bases common js is used.
    - To include the module2 in module1 we use a function called "require".
    - Now the "require" functions loads the module2 into module1.
    - Use debugger to trace the code flow.
    - You don't have to specify .js when requiring js file. But doing so is good practice.
Module.Exports
    - Now we know how we can load a separate module into another module. But it is always good to expose only certain functions of a module and keeping rest private.
    - Like "require" function there is an Object called "module.exports" , using which we can share some functionality of a module and keep the rest private.
    - write some code
    - The value of that Object is what the "require" functions returns.
    - We can store that returned value in a variable.
    - As the value returned is a reusable block of code, we can use it anytime i want.
    - The variable name can be anyting, which is also known as "Default Export".
    - This is the commonJs pattern for imporitng and exporting that node maintains.
Module scope
    - Write some code to explain the problem, create two modules.
    - When executing to diff modules in a single module, there is no naming conflict because each module has there own scope.
    - Node uses IIFE to get this functinality.
    - Write some code to explain IIFE.
    - IIFE is a self invloking functon or immidiately invoked function expression.
    - Talk about IIFE for a bit, write some code.
    - Before a module's code is executed , Node will wrap it with a function wrapper that provides module scope.
    - This save us from naming conflict among variable and functions.
    - So there is proper encapsulation and reusability in unaffedted ,Eaxtly what we want from a module system.
Module wrapper
    - The IIFE that we talked about, contains five parameters,that are important for the workings of a module.
    - Write some code to explain them how parameter and arg works with iffe.
    - show them the final version of a module, with all parameter(exports,require,module,__filename,__dirname).
    - The arguments are injected during runtime by Node.
    - Explain __filename, __dirname.
    - Explain all the parameters.
    - show them final img(module_iife)
Module caching
    - Create a class and explain them about module caching.
    - Every module is first loaded and than it cached.
    - So every other calles to get the module after is is cached, will return the cached module only.
    - Show them the cached value using Debugger.
    - To create a separate instances of Of a class, export the class.

Explain all import export patterns
    - module.exports = variable
    - module.exports = function(){}
    - To export multiple functions use module.exports = Object.
    - module.exports.f1  ,....., module.exports.fn
    - replace moduels.exports with exports(its bad)
module.exports vs exports
    - exports is a referrence that points to same address in the memory where module.exports points.
    - Explain them shallow copy by writting some code using object
    - Now explain img(exports_reff)
    - node only returns the value of module.exports not exports. exports is just a refference pointing to module.exports.

ES module
    - We have talked about the commonjs module format.
    - As the time node was created there was no built in module sustem,so node defaulted with commonjs as its module system.
    - After es6(es2015) es6 modules was introduced.
    - called ad Ecmascript modules, es modules or esm
    - to use the es6 module system, the extension should be .mjs
        - export default varible 
        - export default function
        - export default obj
        - named export
        - import * as something
        - import {} 
        - Node version above supports es modules

Built In Modules
    - Modules that Node.js ships with ,also referred as core modules.
    - Avalible by default when you install node
    - But to use them you have to import them.
    - Example of some built in modules would be Path,Events,Fs,Stream,Http,Cluster etc..

Path module
    - __filename, __dirname.
    - Path module provides utilities for working with file and directory paths.
    - require("node:path") or require("path") 
    - write some code
    - basename(path) = provides the last portion of a path
    - extname(path) = provides the extension of the path(if it is a file than file ext, if a folder than blank)
    - parse(path) = returns a obj with the significant elements of a path.
    - format(obj) = creates a path from the obj
    - isAbsolute(path) = checks if the provided path is absolute or not
    - important join(seg1,seg2,...,segn) = joins all the segments of a path separating them using the platform specific delimiter and normalizes them as well.
    - resolve(seg1,seg2,...,segn) = resolves into an absolute path from the point it encounters the last forward slash ignores the initial portion.
    - many more.....
Go an uderstand the callback pattern.
Event module
    - This module allows us to work with events in node.
    - An event is an action that has happend in our application that we can respond to.
    - Using this module, we can create our own custom events and there handler functions in a non blocking way.
    - give some real life example.
    - require("node:events") or require("events"), returns a constructor/class.
    - write some code to explain that.
    - eventemitter.on(eventName,handler function) -> register a event and attach the coresponding callback.
    - eventemitter.emit(eventName) -> will emit the event and corresponding callbacks will fire.
    - pass arguments to parameter
    - you can register as many event handler you like. 
    - emitting that event will execute all handler.
    - show them why it is non blocking.
    - This is known as Event driven programming, used a lot on node.
Extend the events class of node, create your own module.
    -  Matter of fact , mostly all(fs,stream,http,etc...) built in modules in node js extends the Events class.
    -  create a Shop that implements the event driven style.

Binary data, Character Set, Character Encoding,Streams,Buffer,Async js.

File System module
see fsmodule.txt

Http module.
    - https://www.xyz.com
    - url = www + urlname + .com=type
    - ipv6 128bits = 2^128
    - ipv4 32bits = 2^32
    2^32 = multiple class
    8.8.8.8
    class A ,B,C,D,E
    0 000 0000 = 0 
    0 111 1111 = 127
    computer networkA = 1000
    networkB = 231
    ip address = i can identify your machine. How i will identify which application i want to connect with?
    port number = 16 bit = 2^16 
    ip+port = socket number.
    (Ip address)
    (classfull ip address)
    (classless interdomain routing)
    (port)
    (socket number)
    - https://nodejs.org/dist/latest-v18.x/docs/api/http.html
    - http module is a built in node module that provides us with the functionality to create http server.
    - require("node:http") or require("http");
    - server = http.createServer(options=optional,requestListener = (req,res)=>{}); this method upon invoking returns a http.server instance, 
    - server.listen(port,cb) = you have to provide a port number,by using the socket number will be generated.
    - res.writeHead(statusCode,{content-type:type}) = if you don't provide writeHead, browser will automatically sets it, and it could defeat your intentions. So manually set it.
        - {"content-type":"text/plain"}
        - {"content-type":"application/json"}
        - {"content-type":"text/html"}
        - {"content-type":"text/css"}
        - {"content-type":"text/js"}
        - {"content-type":"image/jpg"}
        - 
    - explain about statusCode (https://developer.mozilla.org/en-US/docs/Web/HTTP/Status); img(status_code)
    - res.write(content) = to provide the content in the res obj,
    - talk a bit about tls hand saking.(https://en.wikipedia.org/wiki/Transport_Layer_Security#:~:text=The%20handshake%20begins%20when%20a,the%20client%20of%20the%20decision.)
    - res.end() = as http is using http version 1.1 , that uses long poling, or this is also called as persistent http. Where you have to manually expire the req, otherwise it will continue.
    - create some routes ,explain how this thinks are working. Explain about GET and POST only.
    - important talk about cors(cross origin resource sharing)(https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) ("Access-Control-Allow-Origin":"*")
    - craete a toy app, to make them see cors horror. frontend backend integration
    - before posting any data, a preflight call is made to warn the server that some data is coming, free up your buffer, and be ready.
    - in the preflight call set up the header in res, "Access-Control-Allow-Headers","*"
    - now the actual POST request will be made.


Third party modules
    - install postman
    - talk about NPM = NPM is package manager to download public modules that are created by other js developers.
    - to install any package using NPM use npm install packageName
    - visit the npm site.
    - install express.
    


server has a diffrent ip and port number; = server is in a diffrent origin


frontend will also have a diffrent ip and port; = frontend was in a diffrent origin